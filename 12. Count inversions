//Brute force approach

#include <bits/stdc++.h> 
long long getInversions(long long *arr, int n){
     int ct=0;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            if(arr[i]>arr[j] && i<j)
              ct++;
        }
    }
    return ct;
}

//Optimal code 
#include <bits/stdc++.h> 


int merge(long long *arr,int low,int mid,int high)
{
  vector<int>temp;
  int i=low;
  int j=mid+1; 
  int ct=0;

  while(i<=mid && j<=high)
  {
    if (arr[i] < arr[j]) {
      temp.push_back(arr[i++]);
 
    } else {
      temp.push_back(arr[j++]);
      ct+=(mid-i+1);
    }
  }
  while(i<=mid) temp.push_back(arr[i++]);
  while(j<=high) temp.push_back(arr[j++]);
  
  for(int i=low;i<=high;i++)
  {
      arr[i]=temp[i-low];
  }
  return ct;
}
int mergeSort(long long *arr,int low,int high)
{ 
    if(low>=high) return 0;
     int ct=0;
     int mid= (low + high)/2;
     ct+= mergeSort(arr,low,mid);
     ct+= mergeSort(arr,mid+1,high);
   ct+= merge(arr,low,mid,high);

     return ct;
}
long long getInversions(long long *arr, int n){
  return mergeSort(arr,0,n-1);
}
